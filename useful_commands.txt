-- general console commands
 7606  git clone https://github.com/michalziolecki/django_intro.git
 7607  ls -la
 7608  cd django_intro
 7609  pyenv local 3.9.9
 7610  pyenv virtualenv django_intro
 7611  pyenv local django_intro
7617  git status
 7618  touch .gitignore
 7619  vim .gitignore
 7620  git status
 7651* pip install django
 7652  pip freeze
 7653  git status
7658  pip freeze | grep Django
 7659  django-admin startproject library .
7662  history | tail -10
 7663  vim useful_commands.txt
 7664  python --version
 7665  pyenv versions
7664  python --version
 7665  pyenv versions
 7666  history | tail -10
 7667  vim useful_commands.txt
 7668  git status
 7669  ls -la library
 7670  git add .
 7671  git commit -m "django init"
 7672  git show
7678  git add useful_commands.txt
 7679  git commit --amend --no-edit
 7691  git remote set-url origin git@github.com:michalziolecki/django_intro.git
 7692  git remote -v
 python3 manage.py runserver
7875  python manage.py makemigrations
 7876  python manage.py migrate
7880  python manage.py createsuperuser
 python manage.py startapp books
git checkout -b orm_models
python manage.py shell
python manage.py dumpdata viewer --output fixtures.json
python manage.py loaddata fixtures.json
-- in django shell
>>> from django.contrib.auth.models import User
>>> User.objects.all()
<QuerySet [<User: user>]>
>>> for user in User.objects.all()
  File "<console>", line 1
    for user in User.objects.all()
                                  ^
SyntaxError: invalid syntax
>>> for user in User.objects.all():
...   user
...
<User: user>
>>> for user in User.objects.all():
...   user.username
...
'user'
>>>
>>> qs = User.objects.all()
>>> print(qs.query)

python manage.py dumpdata books --output books.json
python manage.py loaddata books.json

In [4]: Book.objects.count()
Out[4]: 15500

Book.objects.filter(published_date__year__lt=2022)
Book.objects.filter(published_date__year__gt=2021)
Book.objects.filter(published_date__year__range=(2018,2022))

Book.objects.filter(title__icontains='Harry').all()
Book.objects.filter(title__icontains='Harry').count()

 from django.db.models import Q
 Book.objects.filter(Q(title__icontains='Harry') | Q(title__icontains='Tolkien')).count()
BookAuthor.objects.filter(~Q(name__icontains='Eric')).count()
BookAuthor.objects.filter(Q(name__icontains='Eric')).count()
BookAuthor.objects.filter(name__icontains='Eric').exclude().count()
BookAuthor.objects.filter(name__icontains='William').exists()
Book.objects.filter(authors__name__icontains='Eric').order_by('-published_date')
for x in Book.objects.filter(authors__name__icontains='Eric').order_by('-published_date').all():
    ...:     print(x.authors.all())
In [45]: from django.db.models import Q, Avg

In [46]: Book.objects.aggregate(average=Avg('average_rating'))
Out[46]: {'average': 4.023560209424084}


 for q in "abcdefghijklmnoprstuwqxyz-.":
   ...:     print(f"now is running: {q}")
   ...:     print(f"written: {len(get_books_from_google_api(q))}")

from django.contrib.auth import authenticate
authenticate(username='piotr', password='correctpasswd')
<User: piotr>

python manage.py changepassword piotr

